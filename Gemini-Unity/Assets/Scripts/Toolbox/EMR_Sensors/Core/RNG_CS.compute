#include "UnityCG.cginc"
#include "UnityShaderVariables.cginc"


// Each #kernel tells which function to compile; you can have many kernels
//namespace RNG {


	/*
		double rand_ACORN(int seed, double[] y_n_pre) {
			//D3D11_FEATURE_DATA_D3D11_OPTIONS.ExtendedDoublesShaderInstructions = true;
			//D3D11_FEATURE_DOUBLES.DoublePrecisionFloatShaderOps = true;
			uint y_m = seed;
			uint k = order;
			double M = exp2(30);
			for (int m = 1; m <= k; m++) {
				y_m = (y_m + y_n_pre) % M;
			}
			return y_m / M;
		}
		*/
		// Xorshift algorithm from George Marsaglia's paper
	RWStructuredBuffer<uint> _state_xorshift;

	uint rand_xorshift(uint threadIdx) {
		_state_xorshift[threadIdx] ^= (_state_xorshift[threadIdx] << 13);
		_state_xorshift[threadIdx] ^= (_state_xorshift[threadIdx] << 5);
		_state_xorshift[threadIdx] ^= (_state_xorshift[threadIdx] >> 17);
		return _state_xorshift[threadIdx];
	}

	uint thomas_wang_hash(uint seed) {
		seed = (seed ^ 61) ^ (seed >> 16);
		seed *= 9;
		seed = seed ^ (seed >> 4);
		seed *= 0x27d4eb2d;
		seed = seed ^ (seed >> 15);
		return seed;
	}

	void initialise(uint threadIdx) {
		_state_xorshift[threadIdx] = thomas_wang_hash(threadIdx);
	}

	float RandomFloat(uint threadIdx) {
		return float(rand_xorshift(threadIdx)) / 4294967296.0f;
	}

	[numthreads(1024, 1, 1)]
	void RNG_Initialize(uint id : SV_DispatchThreadID)
	{
		_state_xorshift[id] = thomas_wang_hash(id);
	}

//}

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sensor_streaming/sensor_streaming.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Sensorstreaming {
  public static partial class SensorStreaming
  {
    static readonly string __ServiceName = "sensorstreaming.SensorStreaming";

    static readonly grpc::Marshaller<global::Sensorstreaming.CameraStreamingRequest> __Marshaller_sensorstreaming_CameraStreamingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sensorstreaming.CameraStreamingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sensorstreaming.CameraStreamingResponse> __Marshaller_sensorstreaming_CameraStreamingResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sensorstreaming.CameraStreamingResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sensorstreaming.LidarStreamingRequest> __Marshaller_sensorstreaming_LidarStreamingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sensorstreaming.LidarStreamingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sensorstreaming.LidarStreamingResponse> __Marshaller_sensorstreaming_LidarStreamingResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sensorstreaming.LidarStreamingResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sensorstreaming.RadarStreamingRequest> __Marshaller_sensorstreaming_RadarStreamingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sensorstreaming.RadarStreamingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sensorstreaming.RadarStreamingResponse> __Marshaller_sensorstreaming_RadarStreamingResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sensorstreaming.RadarStreamingResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Sensorstreaming.CameraStreamingRequest, global::Sensorstreaming.CameraStreamingResponse> __Method_StreamCameraSensor = new grpc::Method<global::Sensorstreaming.CameraStreamingRequest, global::Sensorstreaming.CameraStreamingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StreamCameraSensor",
        __Marshaller_sensorstreaming_CameraStreamingRequest,
        __Marshaller_sensorstreaming_CameraStreamingResponse);

    static readonly grpc::Method<global::Sensorstreaming.LidarStreamingRequest, global::Sensorstreaming.LidarStreamingResponse> __Method_StreamLidarSensor = new grpc::Method<global::Sensorstreaming.LidarStreamingRequest, global::Sensorstreaming.LidarStreamingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StreamLidarSensor",
        __Marshaller_sensorstreaming_LidarStreamingRequest,
        __Marshaller_sensorstreaming_LidarStreamingResponse);

    static readonly grpc::Method<global::Sensorstreaming.RadarStreamingRequest, global::Sensorstreaming.RadarStreamingResponse> __Method_StreamRadarSensor = new grpc::Method<global::Sensorstreaming.RadarStreamingRequest, global::Sensorstreaming.RadarStreamingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StreamRadarSensor",
        __Marshaller_sensorstreaming_RadarStreamingRequest,
        __Marshaller_sensorstreaming_RadarStreamingResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Sensorstreaming.SensorStreamingReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SensorStreaming</summary>
    [grpc::BindServiceMethod(typeof(SensorStreaming), "BindService")]
    public abstract partial class SensorStreamingBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Sensorstreaming.CameraStreamingResponse> StreamCameraSensor(global::Sensorstreaming.CameraStreamingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Sensorstreaming.LidarStreamingResponse> StreamLidarSensor(global::Sensorstreaming.LidarStreamingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Sensorstreaming.RadarStreamingResponse> StreamRadarSensor(global::Sensorstreaming.RadarStreamingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SensorStreaming</summary>
    public partial class SensorStreamingClient : grpc::ClientBase<SensorStreamingClient>
    {
      /// <summary>Creates a new client for SensorStreaming</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SensorStreamingClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SensorStreaming that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SensorStreamingClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SensorStreamingClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SensorStreamingClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Sensorstreaming.CameraStreamingResponse StreamCameraSensor(global::Sensorstreaming.CameraStreamingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamCameraSensor(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Sensorstreaming.CameraStreamingResponse StreamCameraSensor(global::Sensorstreaming.CameraStreamingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StreamCameraSensor, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Sensorstreaming.CameraStreamingResponse> StreamCameraSensorAsync(global::Sensorstreaming.CameraStreamingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamCameraSensorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Sensorstreaming.CameraStreamingResponse> StreamCameraSensorAsync(global::Sensorstreaming.CameraStreamingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StreamCameraSensor, null, options, request);
      }
      public virtual global::Sensorstreaming.LidarStreamingResponse StreamLidarSensor(global::Sensorstreaming.LidarStreamingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamLidarSensor(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Sensorstreaming.LidarStreamingResponse StreamLidarSensor(global::Sensorstreaming.LidarStreamingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StreamLidarSensor, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Sensorstreaming.LidarStreamingResponse> StreamLidarSensorAsync(global::Sensorstreaming.LidarStreamingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamLidarSensorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Sensorstreaming.LidarStreamingResponse> StreamLidarSensorAsync(global::Sensorstreaming.LidarStreamingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StreamLidarSensor, null, options, request);
      }
      public virtual global::Sensorstreaming.RadarStreamingResponse StreamRadarSensor(global::Sensorstreaming.RadarStreamingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamRadarSensor(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Sensorstreaming.RadarStreamingResponse StreamRadarSensor(global::Sensorstreaming.RadarStreamingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StreamRadarSensor, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Sensorstreaming.RadarStreamingResponse> StreamRadarSensorAsync(global::Sensorstreaming.RadarStreamingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamRadarSensorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Sensorstreaming.RadarStreamingResponse> StreamRadarSensorAsync(global::Sensorstreaming.RadarStreamingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StreamRadarSensor, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SensorStreamingClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SensorStreamingClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SensorStreamingBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_StreamCameraSensor, serviceImpl.StreamCameraSensor)
          .AddMethod(__Method_StreamLidarSensor, serviceImpl.StreamLidarSensor)
          .AddMethod(__Method_StreamRadarSensor, serviceImpl.StreamRadarSensor).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SensorStreamingBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_StreamCameraSensor, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Sensorstreaming.CameraStreamingRequest, global::Sensorstreaming.CameraStreamingResponse>(serviceImpl.StreamCameraSensor));
      serviceBinder.AddMethod(__Method_StreamLidarSensor, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Sensorstreaming.LidarStreamingRequest, global::Sensorstreaming.LidarStreamingResponse>(serviceImpl.StreamLidarSensor));
      serviceBinder.AddMethod(__Method_StreamRadarSensor, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Sensorstreaming.RadarStreamingRequest, global::Sensorstreaming.RadarStreamingResponse>(serviceImpl.StreamRadarSensor));
    }

  }
}
#endregion

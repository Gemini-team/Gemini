// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: force/force.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Force {

  /// <summary>Holder for reflection information generated from force/force.proto</summary>
  public static partial class ForceReflection {

    #region Descriptor
    /// <summary>File descriptor for force/force.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ForceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFmb3JjZS9mb3JjZS5wcm90bxIFZm9yY2UiKwoIUG9zaXRpb24SCQoBbhgB",
            "IAEoAhIJCgFlGAIgASgCEgkKAWQYAyABKAIiNgoLT3JpZW50YXRpb24SCwoD",
            "cGhpGAEgASgCEg0KBXRoZXRhGAIgASgCEgsKA3BzaRgDIAEoAiIrCghWZWxv",
            "Y2l0eRIJCgF1GAEgASgCEgkKAXYYAiABKAISCQoBdxgDIAEoAiIyCg9Bbmd1",
            "bGFyVmVsb2NpdHkSCQoBcBgBIAEoAhIJCgFxGAIgASgCEgkKAXIYAyABKAIi",
            "OwoMQWNjZWxlcmF0aW9uEg0KBXVfZG90GAEgASgCEg0KBXZfZG90GAIgASgC",
            "Eg0KBXdfZG90GAMgASgCIkIKE0FuZ3VsYXJBY2NlbGVyYXRpb24SDQoFcF9k",
            "b3QYASABKAISDQoFcV9kb3QYAiABKAISDQoFcl9kb3QYAyABKAIiVAoQR2Vu",
            "ZXJhbGl6ZWRGb3JjZRIJCgF4GAEgASgCEgkKAXkYAiABKAISCQoBehgDIAEo",
            "AhIJCgFrGAQgASgCEgkKAW0YBSABKAISCQoBbhgGIAEoAiJTCgxGb3JjZVJl",
            "cXVlc3QSEAoIdmVzc2VsSWQYASABKAkSMQoQZ2VuZXJhbGl6ZWRGb3JjZRgC",
            "IAEoCzIXLmZvcmNlLkdlbmVyYWxpemVkRm9yY2UikwIKDUZvcmNlUmVzcG9u",
            "c2USIQoIcG9zaXRpb24YASABKAsyDy5mb3JjZS5Qb3NpdGlvbhInCgtvcmll",
            "bnRhdGlvbhgCIAEoCzISLmZvcmNlLk9yaWVudGF0aW9uEiEKCHZlbG9jaXR5",
            "GAMgASgLMg8uZm9yY2UuVmVsb2NpdHkSLwoPYW5ndWxhclZlbG9jaXR5GAQg",
            "ASgLMhYuZm9yY2UuQW5ndWxhclZlbG9jaXR5EikKDGFjY2VsZXJhdGlvbhgF",
            "IAEoCzITLmZvcmNlLkFjY2VsZXJhdGlvbhI3ChNhbmd1bGFyQWNjZWxlcmF0",
            "aW9uGAYgASgLMhouZm9yY2UuQW5ndWxhckFjY2VsZXJhdGlvbjJCCgVGb3Jj",
            "ZRI5CgpBcHBseUZvcmNlEhMuZm9yY2UuRm9yY2VSZXF1ZXN0GhQuZm9yY2Uu",
            "Rm9yY2VSZXNwb25zZSIAQicKFmlvLmdycGMuZXhhbXBsZXMuZm9yY2VCBUZv",
            "cmNlUAGiAgNITFdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Force.Position), global::Force.Position.Parser, new[]{ "N", "E", "D" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Force.Orientation), global::Force.Orientation.Parser, new[]{ "Phi", "Theta", "Psi" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Force.Velocity), global::Force.Velocity.Parser, new[]{ "U", "V", "W" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Force.AngularVelocity), global::Force.AngularVelocity.Parser, new[]{ "P", "Q", "R" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Force.Acceleration), global::Force.Acceleration.Parser, new[]{ "UDot", "VDot", "WDot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Force.AngularAcceleration), global::Force.AngularAcceleration.Parser, new[]{ "PDot", "QDot", "RDot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Force.GeneralizedForce), global::Force.GeneralizedForce.Parser, new[]{ "X", "Y", "Z", "K", "M", "N" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Force.ForceRequest), global::Force.ForceRequest.Parser, new[]{ "VesselId", "GeneralizedForce" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Force.ForceResponse), global::Force.ForceResponse.Parser, new[]{ "Position", "Orientation", "Velocity", "AngularVelocity", "Acceleration", "AngularAcceleration" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Position : pb::IMessage<Position> {
    private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Position> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Force.ForceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position(Position other) : this() {
      n_ = other.n_;
      e_ = other.e_;
      d_ = other.d_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position Clone() {
      return new Position(this);
    }

    /// <summary>Field number for the "n" field.</summary>
    public const int NFieldNumber = 1;
    private float n_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float N {
      get { return n_; }
      set {
        n_ = value;
      }
    }

    /// <summary>Field number for the "e" field.</summary>
    public const int EFieldNumber = 2;
    private float e_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float E {
      get { return e_; }
      set {
        e_ = value;
      }
    }

    /// <summary>Field number for the "d" field.</summary>
    public const int DFieldNumber = 3;
    private float d_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float D {
      get { return d_; }
      set {
        d_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Position);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Position other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(N, other.N)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(E, other.E)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(D, other.D)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (N != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(N);
      if (E != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(E);
      if (D != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(D);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (N != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(N);
      }
      if (E != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(E);
      }
      if (D != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(D);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (N != 0F) {
        size += 1 + 4;
      }
      if (E != 0F) {
        size += 1 + 4;
      }
      if (D != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Position other) {
      if (other == null) {
        return;
      }
      if (other.N != 0F) {
        N = other.N;
      }
      if (other.E != 0F) {
        E = other.E;
      }
      if (other.D != 0F) {
        D = other.D;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            N = input.ReadFloat();
            break;
          }
          case 21: {
            E = input.ReadFloat();
            break;
          }
          case 29: {
            D = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Orientation : pb::IMessage<Orientation> {
    private static readonly pb::MessageParser<Orientation> _parser = new pb::MessageParser<Orientation>(() => new Orientation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Orientation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Force.ForceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Orientation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Orientation(Orientation other) : this() {
      phi_ = other.phi_;
      theta_ = other.theta_;
      psi_ = other.psi_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Orientation Clone() {
      return new Orientation(this);
    }

    /// <summary>Field number for the "phi" field.</summary>
    public const int PhiFieldNumber = 1;
    private float phi_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Phi {
      get { return phi_; }
      set {
        phi_ = value;
      }
    }

    /// <summary>Field number for the "theta" field.</summary>
    public const int ThetaFieldNumber = 2;
    private float theta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Theta {
      get { return theta_; }
      set {
        theta_ = value;
      }
    }

    /// <summary>Field number for the "psi" field.</summary>
    public const int PsiFieldNumber = 3;
    private float psi_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Psi {
      get { return psi_; }
      set {
        psi_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Orientation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Orientation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Phi, other.Phi)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Theta, other.Theta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Psi, other.Psi)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Phi != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Phi);
      if (Theta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Theta);
      if (Psi != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Psi);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Phi != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Phi);
      }
      if (Theta != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Theta);
      }
      if (Psi != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Psi);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Phi != 0F) {
        size += 1 + 4;
      }
      if (Theta != 0F) {
        size += 1 + 4;
      }
      if (Psi != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Orientation other) {
      if (other == null) {
        return;
      }
      if (other.Phi != 0F) {
        Phi = other.Phi;
      }
      if (other.Theta != 0F) {
        Theta = other.Theta;
      }
      if (other.Psi != 0F) {
        Psi = other.Psi;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Phi = input.ReadFloat();
            break;
          }
          case 21: {
            Theta = input.ReadFloat();
            break;
          }
          case 29: {
            Psi = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Velocity : pb::IMessage<Velocity> {
    private static readonly pb::MessageParser<Velocity> _parser = new pb::MessageParser<Velocity>(() => new Velocity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Velocity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Force.ForceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Velocity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Velocity(Velocity other) : this() {
      u_ = other.u_;
      v_ = other.v_;
      w_ = other.w_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Velocity Clone() {
      return new Velocity(this);
    }

    /// <summary>Field number for the "u" field.</summary>
    public const int UFieldNumber = 1;
    private float u_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float U {
      get { return u_; }
      set {
        u_ = value;
      }
    }

    /// <summary>Field number for the "v" field.</summary>
    public const int VFieldNumber = 2;
    private float v_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float V {
      get { return v_; }
      set {
        v_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 3;
    private float w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Velocity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Velocity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(U, other.U)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(V, other.V)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(W, other.W)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (U != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(U);
      if (V != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(V);
      if (W != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(W);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (U != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(U);
      }
      if (V != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(V);
      }
      if (W != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(W);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (U != 0F) {
        size += 1 + 4;
      }
      if (V != 0F) {
        size += 1 + 4;
      }
      if (W != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Velocity other) {
      if (other == null) {
        return;
      }
      if (other.U != 0F) {
        U = other.U;
      }
      if (other.V != 0F) {
        V = other.V;
      }
      if (other.W != 0F) {
        W = other.W;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            U = input.ReadFloat();
            break;
          }
          case 21: {
            V = input.ReadFloat();
            break;
          }
          case 29: {
            W = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AngularVelocity : pb::IMessage<AngularVelocity> {
    private static readonly pb::MessageParser<AngularVelocity> _parser = new pb::MessageParser<AngularVelocity>(() => new AngularVelocity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AngularVelocity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Force.ForceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AngularVelocity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AngularVelocity(AngularVelocity other) : this() {
      p_ = other.p_;
      q_ = other.q_;
      r_ = other.r_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AngularVelocity Clone() {
      return new AngularVelocity(this);
    }

    /// <summary>Field number for the "p" field.</summary>
    public const int PFieldNumber = 1;
    private float p_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float P {
      get { return p_; }
      set {
        p_ = value;
      }
    }

    /// <summary>Field number for the "q" field.</summary>
    public const int QFieldNumber = 2;
    private float q_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Q {
      get { return q_; }
      set {
        q_ = value;
      }
    }

    /// <summary>Field number for the "r" field.</summary>
    public const int RFieldNumber = 3;
    private float r_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float R {
      get { return r_; }
      set {
        r_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AngularVelocity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AngularVelocity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(P, other.P)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Q, other.Q)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(R, other.R)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (P != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(P);
      if (Q != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Q);
      if (R != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(R);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (P != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(P);
      }
      if (Q != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Q);
      }
      if (R != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(R);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (P != 0F) {
        size += 1 + 4;
      }
      if (Q != 0F) {
        size += 1 + 4;
      }
      if (R != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AngularVelocity other) {
      if (other == null) {
        return;
      }
      if (other.P != 0F) {
        P = other.P;
      }
      if (other.Q != 0F) {
        Q = other.Q;
      }
      if (other.R != 0F) {
        R = other.R;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            P = input.ReadFloat();
            break;
          }
          case 21: {
            Q = input.ReadFloat();
            break;
          }
          case 29: {
            R = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Acceleration : pb::IMessage<Acceleration> {
    private static readonly pb::MessageParser<Acceleration> _parser = new pb::MessageParser<Acceleration>(() => new Acceleration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Acceleration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Force.ForceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Acceleration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Acceleration(Acceleration other) : this() {
      uDot_ = other.uDot_;
      vDot_ = other.vDot_;
      wDot_ = other.wDot_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Acceleration Clone() {
      return new Acceleration(this);
    }

    /// <summary>Field number for the "u_dot" field.</summary>
    public const int UDotFieldNumber = 1;
    private float uDot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float UDot {
      get { return uDot_; }
      set {
        uDot_ = value;
      }
    }

    /// <summary>Field number for the "v_dot" field.</summary>
    public const int VDotFieldNumber = 2;
    private float vDot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VDot {
      get { return vDot_; }
      set {
        vDot_ = value;
      }
    }

    /// <summary>Field number for the "w_dot" field.</summary>
    public const int WDotFieldNumber = 3;
    private float wDot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WDot {
      get { return wDot_; }
      set {
        wDot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Acceleration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Acceleration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UDot, other.UDot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VDot, other.VDot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WDot, other.WDot)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UDot != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UDot);
      if (VDot != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VDot);
      if (WDot != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WDot);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UDot != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(UDot);
      }
      if (VDot != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(VDot);
      }
      if (WDot != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(WDot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UDot != 0F) {
        size += 1 + 4;
      }
      if (VDot != 0F) {
        size += 1 + 4;
      }
      if (WDot != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Acceleration other) {
      if (other == null) {
        return;
      }
      if (other.UDot != 0F) {
        UDot = other.UDot;
      }
      if (other.VDot != 0F) {
        VDot = other.VDot;
      }
      if (other.WDot != 0F) {
        WDot = other.WDot;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            UDot = input.ReadFloat();
            break;
          }
          case 21: {
            VDot = input.ReadFloat();
            break;
          }
          case 29: {
            WDot = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AngularAcceleration : pb::IMessage<AngularAcceleration> {
    private static readonly pb::MessageParser<AngularAcceleration> _parser = new pb::MessageParser<AngularAcceleration>(() => new AngularAcceleration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AngularAcceleration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Force.ForceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AngularAcceleration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AngularAcceleration(AngularAcceleration other) : this() {
      pDot_ = other.pDot_;
      qDot_ = other.qDot_;
      rDot_ = other.rDot_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AngularAcceleration Clone() {
      return new AngularAcceleration(this);
    }

    /// <summary>Field number for the "p_dot" field.</summary>
    public const int PDotFieldNumber = 1;
    private float pDot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PDot {
      get { return pDot_; }
      set {
        pDot_ = value;
      }
    }

    /// <summary>Field number for the "q_dot" field.</summary>
    public const int QDotFieldNumber = 2;
    private float qDot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float QDot {
      get { return qDot_; }
      set {
        qDot_ = value;
      }
    }

    /// <summary>Field number for the "r_dot" field.</summary>
    public const int RDotFieldNumber = 3;
    private float rDot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RDot {
      get { return rDot_; }
      set {
        rDot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AngularAcceleration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AngularAcceleration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PDot, other.PDot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(QDot, other.QDot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RDot, other.RDot)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PDot != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PDot);
      if (QDot != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(QDot);
      if (RDot != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RDot);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PDot != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(PDot);
      }
      if (QDot != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(QDot);
      }
      if (RDot != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(RDot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PDot != 0F) {
        size += 1 + 4;
      }
      if (QDot != 0F) {
        size += 1 + 4;
      }
      if (RDot != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AngularAcceleration other) {
      if (other == null) {
        return;
      }
      if (other.PDot != 0F) {
        PDot = other.PDot;
      }
      if (other.QDot != 0F) {
        QDot = other.QDot;
      }
      if (other.RDot != 0F) {
        RDot = other.RDot;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            PDot = input.ReadFloat();
            break;
          }
          case 21: {
            QDot = input.ReadFloat();
            break;
          }
          case 29: {
            RDot = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GeneralizedForce : pb::IMessage<GeneralizedForce> {
    private static readonly pb::MessageParser<GeneralizedForce> _parser = new pb::MessageParser<GeneralizedForce>(() => new GeneralizedForce());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeneralizedForce> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Force.ForceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneralizedForce() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneralizedForce(GeneralizedForce other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      k_ = other.k_;
      m_ = other.m_;
      n_ = other.n_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneralizedForce Clone() {
      return new GeneralizedForce(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "k" field.</summary>
    public const int KFieldNumber = 4;
    private float k_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float K {
      get { return k_; }
      set {
        k_ = value;
      }
    }

    /// <summary>Field number for the "m" field.</summary>
    public const int MFieldNumber = 5;
    private float m_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float M {
      get { return m_; }
      set {
        m_ = value;
      }
    }

    /// <summary>Field number for the "n" field.</summary>
    public const int NFieldNumber = 6;
    private float n_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float N {
      get { return n_; }
      set {
        n_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeneralizedForce);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeneralizedForce other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(K, other.K)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(M, other.M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(N, other.N)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (K != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(K);
      if (M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(M);
      if (N != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(N);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (K != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(K);
      }
      if (M != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(M);
      }
      if (N != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(N);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (K != 0F) {
        size += 1 + 4;
      }
      if (M != 0F) {
        size += 1 + 4;
      }
      if (N != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeneralizedForce other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.K != 0F) {
        K = other.K;
      }
      if (other.M != 0F) {
        M = other.M;
      }
      if (other.N != 0F) {
        N = other.N;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            K = input.ReadFloat();
            break;
          }
          case 45: {
            M = input.ReadFloat();
            break;
          }
          case 53: {
            N = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ForceRequest : pb::IMessage<ForceRequest> {
    private static readonly pb::MessageParser<ForceRequest> _parser = new pb::MessageParser<ForceRequest>(() => new ForceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Force.ForceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForceRequest(ForceRequest other) : this() {
      vesselId_ = other.vesselId_;
      generalizedForce_ = other.generalizedForce_ != null ? other.generalizedForce_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForceRequest Clone() {
      return new ForceRequest(this);
    }

    /// <summary>Field number for the "vesselId" field.</summary>
    public const int VesselIdFieldNumber = 1;
    private string vesselId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VesselId {
      get { return vesselId_; }
      set {
        vesselId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "generalizedForce" field.</summary>
    public const int GeneralizedForceFieldNumber = 2;
    private global::Force.GeneralizedForce generalizedForce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Force.GeneralizedForce GeneralizedForce {
      get { return generalizedForce_; }
      set {
        generalizedForce_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VesselId != other.VesselId) return false;
      if (!object.Equals(GeneralizedForce, other.GeneralizedForce)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VesselId.Length != 0) hash ^= VesselId.GetHashCode();
      if (generalizedForce_ != null) hash ^= GeneralizedForce.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VesselId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VesselId);
      }
      if (generalizedForce_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GeneralizedForce);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VesselId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VesselId);
      }
      if (generalizedForce_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GeneralizedForce);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForceRequest other) {
      if (other == null) {
        return;
      }
      if (other.VesselId.Length != 0) {
        VesselId = other.VesselId;
      }
      if (other.generalizedForce_ != null) {
        if (generalizedForce_ == null) {
          GeneralizedForce = new global::Force.GeneralizedForce();
        }
        GeneralizedForce.MergeFrom(other.GeneralizedForce);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            VesselId = input.ReadString();
            break;
          }
          case 18: {
            if (generalizedForce_ == null) {
              GeneralizedForce = new global::Force.GeneralizedForce();
            }
            input.ReadMessage(GeneralizedForce);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ForceResponse : pb::IMessage<ForceResponse> {
    private static readonly pb::MessageParser<ForceResponse> _parser = new pb::MessageParser<ForceResponse>(() => new ForceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Force.ForceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForceResponse(ForceResponse other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      orientation_ = other.orientation_ != null ? other.orientation_.Clone() : null;
      velocity_ = other.velocity_ != null ? other.velocity_.Clone() : null;
      angularVelocity_ = other.angularVelocity_ != null ? other.angularVelocity_.Clone() : null;
      acceleration_ = other.acceleration_ != null ? other.acceleration_.Clone() : null;
      angularAcceleration_ = other.angularAcceleration_ != null ? other.angularAcceleration_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForceResponse Clone() {
      return new ForceResponse(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Force.Position position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Force.Position Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "orientation" field.</summary>
    public const int OrientationFieldNumber = 2;
    private global::Force.Orientation orientation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Force.Orientation Orientation {
      get { return orientation_; }
      set {
        orientation_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 3;
    private global::Force.Velocity velocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Force.Velocity Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    /// <summary>Field number for the "angularVelocity" field.</summary>
    public const int AngularVelocityFieldNumber = 4;
    private global::Force.AngularVelocity angularVelocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Force.AngularVelocity AngularVelocity {
      get { return angularVelocity_; }
      set {
        angularVelocity_ = value;
      }
    }

    /// <summary>Field number for the "acceleration" field.</summary>
    public const int AccelerationFieldNumber = 5;
    private global::Force.Acceleration acceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Force.Acceleration Acceleration {
      get { return acceleration_; }
      set {
        acceleration_ = value;
      }
    }

    /// <summary>Field number for the "angularAcceleration" field.</summary>
    public const int AngularAccelerationFieldNumber = 6;
    private global::Force.AngularAcceleration angularAcceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Force.AngularAcceleration AngularAcceleration {
      get { return angularAcceleration_; }
      set {
        angularAcceleration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Orientation, other.Orientation)) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      if (!object.Equals(AngularVelocity, other.AngularVelocity)) return false;
      if (!object.Equals(Acceleration, other.Acceleration)) return false;
      if (!object.Equals(AngularAcceleration, other.AngularAcceleration)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (orientation_ != null) hash ^= Orientation.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      if (angularVelocity_ != null) hash ^= AngularVelocity.GetHashCode();
      if (acceleration_ != null) hash ^= Acceleration.GetHashCode();
      if (angularAcceleration_ != null) hash ^= AngularAcceleration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (orientation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Orientation);
      }
      if (velocity_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Velocity);
      }
      if (angularVelocity_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AngularVelocity);
      }
      if (acceleration_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Acceleration);
      }
      if (angularAcceleration_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(AngularAcceleration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (orientation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Orientation);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      if (angularVelocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AngularVelocity);
      }
      if (acceleration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Acceleration);
      }
      if (angularAcceleration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AngularAcceleration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForceResponse other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Force.Position();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.orientation_ != null) {
        if (orientation_ == null) {
          Orientation = new global::Force.Orientation();
        }
        Orientation.MergeFrom(other.Orientation);
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          Velocity = new global::Force.Velocity();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      if (other.angularVelocity_ != null) {
        if (angularVelocity_ == null) {
          AngularVelocity = new global::Force.AngularVelocity();
        }
        AngularVelocity.MergeFrom(other.AngularVelocity);
      }
      if (other.acceleration_ != null) {
        if (acceleration_ == null) {
          Acceleration = new global::Force.Acceleration();
        }
        Acceleration.MergeFrom(other.Acceleration);
      }
      if (other.angularAcceleration_ != null) {
        if (angularAcceleration_ == null) {
          AngularAcceleration = new global::Force.AngularAcceleration();
        }
        AngularAcceleration.MergeFrom(other.AngularAcceleration);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::Force.Position();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (orientation_ == null) {
              Orientation = new global::Force.Orientation();
            }
            input.ReadMessage(Orientation);
            break;
          }
          case 26: {
            if (velocity_ == null) {
              Velocity = new global::Force.Velocity();
            }
            input.ReadMessage(Velocity);
            break;
          }
          case 34: {
            if (angularVelocity_ == null) {
              AngularVelocity = new global::Force.AngularVelocity();
            }
            input.ReadMessage(AngularVelocity);
            break;
          }
          case 42: {
            if (acceleration_ == null) {
              Acceleration = new global::Force.Acceleration();
            }
            input.ReadMessage(Acceleration);
            break;
          }
          case 50: {
            if (angularAcceleration_ == null) {
              AngularAcceleration = new global::Force.AngularAcceleration();
            }
            input.ReadMessage(AngularAcceleration);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

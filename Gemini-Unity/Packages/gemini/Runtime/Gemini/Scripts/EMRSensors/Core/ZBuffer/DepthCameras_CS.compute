// #pragma require 2darray

#include "UnityCG.cginc"
#include "UnityShaderVariables.cginc"

Texture2DArray<float4> depthImages;

// Texture2D<float4> depthImage0;
// Texture2D<float4> depthImage1;
// Texture2D<float4> depthImage2;
// Texture2D<float4> depthImage3;
// Texture2D<float4> depthImage4;
// Texture2D<float4> depthImage5;
// Texture2D<float4> depthImage6;
// Texture2D<float4> depthImage7;
// Texture2D<float4> depthImage8;
// Texture2D<float4> depthImage9;
// Texture2D<float4> depthImage10;
// Texture2D<float4> depthImage11;
// Texture2D<float4> depthImage12;
// Texture2D<float4> depthImage13;
// Texture2D<float4> depthImage14;
// Texture2D<float4> depthImage15;
// Texture2D<float4> depthImage16;
// Texture2D<float4> depthImage17;
// Texture2D<float4> depthImage18;
// Texture2D<float4> depthImage19;
// Texture2D<float4> depthImage20;
// Texture2D<float4> depthImage21;
// Texture2D<float4> depthImage22;
// Texture2D<float4> depthImage23;
// Texture2D<float4> depthImage24;
// Texture2D<float4> depthImage25;
// Texture2D<float4> depthImage26;
// Texture2D<float4> depthImage27;
// Texture2D<float4> depthImage28;
// Texture2D<float4> depthImage29;
// Texture2D<float4> depthImage30;
// Texture2D<float4> depthImage31;

// Texture2D<float4> depthImages;

float4x4 CameraRotationMatrices[31];
float4x4 inv_CameraMatrix;
float4x4 CameraMatrix;

uint ImageWidthRes;
uint ImageHeightRes;
int NrOfImages;

// https://stackoverflow.com/questions/32227283/getting-world-position-from-depth-buffer-value
float3 ImageToCartesian(float depthData, uint2 TexCoord, uint cam_index) {

	// float depth = depthImage[TexCoord.xy].x;
	float depth = depthData;
	float W = float(ImageWidthRes);
	float H = float(ImageHeightRes);

	// from Unity image frame to OpenGL clip space
	float x = 2 * TexCoord.x / W - 1;
	float y = 2 * TexCoord.y / H - 1;
	float z = (1 - depth) * 2.0 - 1.0;

	// if depth == 0  (i.e. at far plane) -> set z to 0
	if ((1 - depth) == 1) {
		z = 0; // HACK what purpose does it serve to set z to zero? 
	}

	float4 clipSpacePosition = float4(x, y, z, 1.0);
	float4 viewSpacePosition = mul(inv_CameraMatrix, clipSpacePosition); // inverted projection matrix (as provided by openGL, right handed)
	// see bottom of first answer of https://answers.unity.com/questions/1359718/what-do-the-values-in-the-matrix4x4-for-cameraproj.html

	// Perspective division
	viewSpacePosition /= viewSpacePosition.w;
	viewSpacePosition.z *= -1; // convert from right handed [right, up, backward] to left handed [right, up, forward]

	float4 bodySpacePosition = mul(CameraRotationMatrices[cam_index], viewSpacePosition); // rotation matrix provided by Unity (in left handed land) 

	return bodySpacePosition.xyz;
}

float3 ImagesToCartesian(uint2 TexCoord) {

	uint n_camera = TexCoord.x / ImageWidthRes;
	TexCoord.x = TexCoord.x % ImageWidthRes;
	float depthData = depthImages[float3(TexCoord.x, TexCoord.y, n_camera)].x;
	ImageToCartesian(depthData, TexCoord, n_camera);

	// if (n_camera == 0) {
	// 	return ImageToCartesian(depthImage0, TexCoord, n_camera);
	// }
	// else if (n_camera == 1) {
	// 	return ImageToCartesian(depthImage1, TexCoord, n_camera);
	// }
	// else if (n_camera == 2) {
	// 	return ImageToCartesian(depthImage2, TexCoord, n_camera);
	// }
	// else if (n_camera == 3) {
	// 	return ImageToCartesian(depthImage3, TexCoord, n_camera);
	// }
	
	/*else if(TexCoord.x < 5 * ImageWidthRes){
		TexCoord.x -= 4 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix4, depthImage4, TexCoord);
	}else if(TexCoord.x < 6 * ImageWidthRes){
		TexCoord.x -= 5 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix5, depthImage5, TexCoord);
	}else if(TexCoord.x < 7 * ImageWidthRes){
		TexCoord.x -= 6 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix6, depthImage6, TexCoord);
	}else if(TexCoord.x < 8 * ImageWidthRes){
		TexCoord.x -= 7 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix7, depthImage7, TexCoord);
	}else if(TexCoord.x < 9 * ImageWidthRes){
		TexCoord.x -= 8 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix8, depthImage8, TexCoord);
	}else if(TexCoord.x < 10 * ImageWidthRes){
		TexCoord.x -= 9 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix9, depthImage9, TexCoord);
	}else if(TexCoord.x < 11 * ImageWidthRes){
		TexCoord.x -= 10 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix10, depthImage10, TexCoord);
	}else if(TexCoord.x < 12 * ImageWidthRes){
		TexCoord.x -= 11 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix11, depthImage11, TexCoord);
	}else if(TexCoord.x < 13 * ImageWidthRes){
		TexCoord.x -= 12 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix12, depthImage12, TexCoord);
	}else if(TexCoord.x < 14 * ImageWidthRes){
		TexCoord.x -= 13 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix13, depthImage13, TexCoord);
	}else if(TexCoord.x < 15 * ImageWidthRes){
		TexCoord.x -= 14 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix14, depthImage14, TexCoord);
	}else if(TexCoord.x < 16 * ImageWidthRes){
		TexCoord.x -= 15 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix15, depthImage15, TexCoord);
	}else if(TexCoord.x < 17 * ImageWidthRes){
		TexCoord.x -= 16 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix16, depthImage16, TexCoord);
	}else if(TexCoord.x < 18 * ImageWidthRes){
		TexCoord.x -= 17 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix17, depthImage17, TexCoord);
	}else if(TexCoord.x < 19 * ImageWidthRes){
		TexCoord.x -= 18 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix18, depthImage18, TexCoord);
	}else if(TexCoord.x < 20 * ImageWidthRes){
		TexCoord.x -= 19 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix19, depthImage19, TexCoord);
	}else if(TexCoord.x < 21 * ImageWidthRes){
		TexCoord.x -= 20 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix20, depthImage20, TexCoord);
	}else if(TexCoord.x < 22 * ImageWidthRes){
		TexCoord.x -= 21 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix21, depthImage21, TexCoord);
	}else if(TexCoord.x < 23 * ImageWidthRes){
		TexCoord.x -= 22 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix22, depthImage22, TexCoord);
	}else if(TexCoord.x < 24 * ImageWidthRes){
		TexCoord.x -= 23 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix23, depthImage23, TexCoord);
	}else if(TexCoord.x < 25 * ImageWidthRes){
		TexCoord.x -= 24 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix24, depthImage24, TexCoord);
	}else if(TexCoord.x < 26 * ImageWidthRes){
		TexCoord.x -= 25 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix25, depthImage25, TexCoord);
	}else if(TexCoord.x < 27 * ImageWidthRes){
		TexCoord.x -= 26 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix26, depthImage26, TexCoord);
	}else if(TexCoord.x < 28 * ImageWidthRes){
		TexCoord.x -= 27 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix27, depthImage27, TexCoord);
	}else if(TexCoord.x < 29 * ImageWidthRes){
		TexCoord.x -= 28 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix28, depthImage28, TexCoord);
	}else if(TexCoord.x < 30 * ImageWidthRes){
		TexCoord.x -= 29 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix29, depthImage29, TexCoord);
	}else if(TexCoord.x < 31 * ImageWidthRes){
		TexCoord.x -= 30 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix30, depthImage30, TexCoord);
	}else if (TexCoord.x < 32 * ImageWidthRes) {
		TexCoord.x -= 31 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix31, depthImage31, TexCoord);
	}*/
	return float3(0, 0, 0);
}

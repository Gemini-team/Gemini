#include "UnityCG.cginc"

#pragma kernel RadarSpokes
#pragma kernel RadarRangeCovolution
#pragma kernel FindRadarSpokeMax
#pragma kernel CreateRadarPlotImage
#pragma kernel CreateRadarSpokeImage
#pragma kernel ClearRadar
#pragma kernel RadarDataKernel


Texture2D<float4> RadarCharacteristics;

Texture2D<float4> depthImage0;
Texture2D<float4> depthImage1;
Texture2D<float4> depthImage2;
Texture2D<float4> depthImage3;
Texture2D<float4> depthImage4;
Texture2D<float4> depthImage5;
Texture2D<float4> depthImage6;
Texture2D<float4> depthImage7;
Texture2D<float4> depthImage8;
Texture2D<float4> depthImage9;
Texture2D<float4> depthImage10;
Texture2D<float4> depthImage11;
Texture2D<float4> depthImage12;
Texture2D<float4> depthImage13;
Texture2D<float4> depthImage14;
Texture2D<float4> depthImage15;

float4x4 CameraRotationMatrix0;
float4x4 CameraRotationMatrix1;
float4x4 CameraRotationMatrix2;
float4x4 CameraRotationMatrix3;
float4x4 CameraRotationMatrix4;
float4x4 CameraRotationMatrix5;
float4x4 CameraRotationMatrix6;
float4x4 CameraRotationMatrix7;
float4x4 CameraRotationMatrix8;
float4x4 CameraRotationMatrix9;
float4x4 CameraRotationMatrix10;
float4x4 CameraRotationMatrix11;
float4x4 CameraRotationMatrix12;
float4x4 CameraRotationMatrix13;
float4x4 CameraRotationMatrix14;
float4x4 CameraRotationMatrix15;

float4x4 inv_CameraMatrix;

RWStructuredBuffer<int> RadarSpokesInt;
RWStructuredBuffer<float> RadarSpokesFloat;
uint ImageWidthRes;
uint ImageHeightRes;
int NrOfImages;

int radarResolution;
int radarSweepResolution;
float MaxDist;
float MinDist;
float Sensitivity;
float AntennaGainDbi;
float PowerW;
float RadarFrequencyGhz;
float SpokeAngle;


// https://stackoverflow.com/questions/32227283/getting-world-position-from-depth-buffer-value
float3 ImageToCartesian(float4x4 projMatrixInv, float4x4 rotationMatrix, Texture2D<float4> depthImage, uint2 TexCoord) {

	float depth = depthImage[TexCoord.xy].x;
	float W = float(ImageWidthRes);
	float H = float(ImageHeightRes);

	// To hinder drawing points at far plane
	float z = (1 - depth) * 2.0 - 1.0;
	//if ((1 - depth) == 1) {
		//z = 0;
	//}

	// OpenGL clipspace convention

	float x = 2 * TexCoord.x / W - 1;
	float y = 2 * TexCoord.y / H - 1;
	float4 clipSpacePosition = float4(x, y, z, 1.0);
	float4 viewSpacePosition = mul(projMatrixInv,clipSpacePosition);

	// Perspective division
	viewSpacePosition /= viewSpacePosition.w;
	viewSpacePosition.z *= -1;

	float4 bodySpacePosition = mul(rotationMatrix, viewSpacePosition);

	return bodySpacePosition.xyz;
}

float3 ImagesToCartesian(uint2 TexCoord) {
	if (TexCoord.x < ImageWidthRes) {
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix0, depthImage0, TexCoord);
	}else if(TexCoord.x < 2 * ImageWidthRes){
		TexCoord.x -= ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix1, depthImage1, TexCoord);
	}else if(TexCoord.x < 3 * ImageWidthRes){
		TexCoord.x -= 2*ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix2, depthImage2, TexCoord);
	}else if(TexCoord.x < 4 * ImageWidthRes){
		TexCoord.x -= 3 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix3, depthImage3, TexCoord);
	}else if(TexCoord.x < 5 * ImageWidthRes){
		TexCoord.x -= 4 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix4, depthImage4, TexCoord);
	}else if(TexCoord.x < 6 * ImageWidthRes){
		TexCoord.x -= 5 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix5, depthImage5, TexCoord);
	}else if(TexCoord.x < 7 * ImageWidthRes){
		TexCoord.x -= 6 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix6, depthImage6, TexCoord);
	}else if(TexCoord.x < 8 * ImageWidthRes){
		TexCoord.x -= 7 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix7, depthImage7, TexCoord);
	}else if(TexCoord.x < 9 * ImageWidthRes){
		TexCoord.x -= 8 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix8, depthImage8, TexCoord);
	}else if(TexCoord.x < 10 * ImageWidthRes){
		TexCoord.x -= 9 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix9, depthImage9, TexCoord);
	}else if(TexCoord.x < 11 * ImageWidthRes){
		TexCoord.x -= 10 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix10, depthImage10, TexCoord);
	}else if(TexCoord.x < 12 * ImageWidthRes){
		TexCoord.x -= 11 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix11, depthImage11, TexCoord);
	}else if(TexCoord.x < 13 * ImageWidthRes){
		TexCoord.x -= 12 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix12, depthImage12, TexCoord);
	}else if(TexCoord.x < 14 * ImageWidthRes){
		TexCoord.x -= 13 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix13, depthImage13, TexCoord);
	}else if(TexCoord.x < 15 * ImageWidthRes){
		TexCoord.x -= 14 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix14, depthImage14, TexCoord);
	}else if(TexCoord.x < 16 * ImageWidthRes){
		TexCoord.x -= 15 * ImageWidthRes;
		return ImageToCartesian(inv_CameraMatrix, CameraRotationMatrix15, depthImage15, TexCoord);
	}
	return float3(0, 0, 0);
}

int CordinateToArrayDepth(float3 coordinate) {
	float depth = length(coordinate) / MaxDist;
	if (depth <= 0.9999f & depth >= 0) {
		return int(depth*radarResolution);
	}
	else {
		return -1;
	}
}

float CordinateToDepth(float3 coordinate) {
	float depth = length(coordinate) / MaxDist;
	if (depth < 0.9999f & depth >= 0) {
		return depth;
	}
	else {
		return 0;
	}
}


uint floatToInt(float value) {
	float den = 1000000000* RadarFrequencyGhz;
	return uint(value * den);
}

float intToFloat(uint value) {
	float den = 1000000000* RadarFrequencyGhz;
	return float(value / den);
}

RWTexture2D<float4> DebugImage;
[numthreads(32, 32, 1)]
void RadarSpokes(uint3 id : SV_DispatchThreadID){
	for (int offset = 0; offset < radarSweepResolution; offset++) {
		float3 pixelCoordinates = ImagesToCartesian(id.xy);
		int pixelOffset = (offset * NrOfImages * ImageWidthRes) / radarSweepResolution;
		uint2 sweepCord = uint2((id.x + pixelOffset) % (NrOfImages * ImageWidthRes), id.y);

		float AntennaContants = PowerW * pow(10, AntennaGainDbi / 10) * pow(0.2997f/ RadarFrequencyGhz,2);
		float depth = CordinateToDepth(pixelCoordinates);
		uint power = floatToInt(AntennaContants*pow(RadarCharacteristics[sweepCord],2) / pow(depth,4));

		int arrayDepth = CordinateToArrayDepth(pixelCoordinates);
		if (arrayDepth != -1) {
			InterlockedAdd(RadarSpokesInt[offset*radarResolution + arrayDepth], power);
		}
	}
}


[numthreads(512, 1, 1)]
void RadarRangeCovolution(uint id : SV_GroupThreadID) {
	const int M = 100;
	float sigma = sqrt(0.2997f / (2 * RadarFrequencyGhz));
	float x_rel = 0;
	float weight = 0;
	float value = 0;
	
	for (int range = 0; range < radarResolution; range++) {		
		value = 0;
		for (int j = -M; j <= M; j++) {
			if (range + j > 0 && range + j < radarResolution) {
				x_rel = j * (MaxDist - MinDist) / radarResolution;
				weight = exp(-0.5*pow(x_rel / sigma, 2)) / (sigma*sqrt(2 * 3.141592));
				value += weight * intToFloat(RadarSpokesInt[id*radarResolution + range + j]);
			}
		}
		RadarSpokesFloat[id*radarResolution + range] = value;
	}
}


RWStructuredBuffer<float> MaxSpokes;
[numthreads(512, 1, 1)]
void FindRadarSpokeMax(uint id : SV_GroupThreadID) {
	float maxValue = 0;
	for (int range = 0; range < radarResolution; range++) {
		if (maxValue < RadarSpokesFloat[id*radarResolution + range]) {
			maxValue = RadarSpokesFloat[id*radarResolution + range];
		}
	}
	MaxSpokes[id] = maxValue;
}


// NB! The bytes must have a value between 0-15
// https://stackoverflow.com/questions/39978751/how-do-you-concatenate-4-uint8-variables-into-one-uint32-variable/39979191
uint PackBytesToUint(uint firstByte, uint secondByte, uint thirdByte, uint fourthByte) {
	return (fourthByte << 24) + (thirdByte << 16) + (secondByte << 8) + firstByte;
}

RWStructuredBuffer<uint> spokeData;
RWStructuredBuffer<double> timeInSeconds;
RWStructuredBuffer<float> azimuth;
RWStructuredBuffer<double> timeArray;

[numthreads(512, 1, 1)]
void RadarDataKernel(uint id : SV_GroupThreadID) {
	float normalization = MaxSpokes[id];
	uint firstByte = 0;
	uint secondByte = 0;
	uint thirdByte = 0;
	uint fourthByte = 0;
	for (int range = 0; range < radarResolution; range += 4) {
		//spokeData[id*radarResolution + range] = uint(15 * RadarSpokesFloat[id*radarResolution + range] / normalization);
		firstByte = uint(15 * RadarSpokesFloat[id*radarResolution + range + 0] / normalization);
		secondByte = uint(15 * RadarSpokesFloat[id*radarResolution + range + 1] / normalization);
		thirdByte = uint(15 * RadarSpokesFloat[id*radarResolution + range + 2] / normalization);
		fourthByte = uint(15 * RadarSpokesFloat[id*radarResolution + range + 3] / normalization);
		spokeData[(id*radarResolution + range) / 4] = PackBytesToUint(firstByte, secondByte, thirdByte, fourthByte);
	}
	timeInSeconds[id] = timeArray[0] + 0.1*(float(id) / float(radarSweepResolution));
	azimuth[id] = 2 * 3.14159265*(float(id) / float(radarSweepResolution));
}


RWTexture2D<float4> plotImage;
[numthreads(32, 32, 1)]
void CreateRadarPlotImage(uint3 id : SV_DispatchThreadID) {
	int W;
	int H;
	plotImage.GetDimensions(W, H);
	float2 Origo = float2(W / 2, H / 2);
	float2 rel_O = id.xy - Origo;
	uint DistanceID = uint((2*length(rel_O)/W)*radarResolution);
	uint AngleID = uint((atan2(rel_O.y, rel_O.x) + 3.141592) / (2 * 3.141592)*radarSweepResolution);

	if (isnan(AngleID) || DistanceID > radarResolution) {
		plotImage[id.xy] = float4(0, 0, 0, 0);
	}
	else if(AngleID == uint(SpokeAngle*radarSweepResolution /360)){
		plotImage[id.xy] = float4(1, 1, 0, 1);
	}
	else {
		float power = RadarSpokesFloat[AngleID*radarResolution + DistanceID];
		float normalization = MaxSpokes[AngleID];
		if (Sensitivity == 30000) {
			plotImage[id.xy] = power * float4(0, 1, 0, 0) / normalization + float4(0, 0, 0, 1);
		}
		else {
			plotImage[id.xy] = power * float4(0, 1, 0, 0) / Sensitivity + float4(0, 0, 0, 1);
		}
	}
}

RWTexture2D<float4> spokeImage;
[numthreads(32, 32, 1)]
void CreateRadarSpokeImage(uint3 id : SV_DispatchThreadID) {
	int W;
	int H;
	spokeImage.GetDimensions(W, H);
	int AngleID = int(SpokeAngle * radarSweepResolution / 360);
	int DistanceID = id.x*radarResolution / W;
	float power = RadarSpokesFloat[AngleID*radarResolution + DistanceID];
	float normalization = MaxSpokes[AngleID];

	if (Sensitivity == 30000) {
		if (id.y <= int(H*power/normalization)) {
			spokeImage[id.xy] = float4(1, 1, 0, 0)*id.y/float(H*power / normalization) + float4(0, 0, 0, 1);
		}else {
			spokeImage[id.xy] = float4(0, 0, 0, 1);
		}
	}
	else {
		if (int(id.y <= H * power/ Sensitivity)) {
			if (H <= H * power / Sensitivity) {
				spokeImage[id.xy] = float4(1, 1, 0, 0)*id.y / float(H) + float4(0, 0, 0, 1);
			}else {
				spokeImage[id.xy] = float4(1, 1, 0, 0)*id.y / float(H*power / Sensitivity) + float4(0, 0, 0, 1);
			}
		}else {
			spokeImage[id.xy] = float4(0, 0, 0, 1);
		}
	}

}


[numthreads(1024, 1, 1)]
void ClearRadar(uint3 id : SV_DispatchThreadID) {
	RadarSpokesInt[id.x] = 0;
}